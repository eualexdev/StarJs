// Copyright (c) 2021 eualexdev && Star Comics

// A permissão é concedida, gratuitamente, a qualquer pessoa que obtenha uma cópia
// deste software e arquivos de documentação associados (o "Software"), para lidar
// no Software sem restrição, incluindo, sem limitação, os direitos
// para usar, copiar, modificar, mesclar, publicar, distribuir, sublicenciar e / ou vender
// cópias do Software, e para permitir as pessoas a quem o Software é
// fornecido para fazê-lo, sujeito às seguintes condições:

// O aviso de direitos autorais acima e este aviso de permissão devem ser incluídos em todos
// cópias ou partes substanciais do Software.

// O SOFTWARE É FORNECIDO "COMO ESTÁ", SEM GARANTIA DE QUALQUER TIPO, EXPRESSA OU
// IMPLÍCITA, INCLUINDO, MAS NÃO SE LIMITANDO ÀS GARANTIAS DE COMERCIALIZAÇÃO,
// ADEQUAÇÃO A UMA FINALIDADE ESPECÍFICA E NÃO VIOLAÇÃO. EM NENHUMA HIPÓTESE O
// AUTORES OU TITULARES DE DIREITOS AUTORAIS SÃO RESPONSÁVEIS POR QUALQUER RECLAMAÇÃO, DANOS OU OUTROS
// RESPONSABILIDADE, SEJA EM AÇÃO DE CONTRATO, DELITO OU DE OUTRA FORMA, DECORRENTE DE,
// FORA DE OU EM CONEXÃO COM O SOFTWARE OU O USO OU OUTRAS NEGOCIAÇÕES NO
// PROGRAMAS.

// Copyright (c) 2021 eualexdev && Star Comics

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

var value_exp = 0;
var SendException = /** @class */ (function () {
    function SendException(message) {
        if (message === void 0) { message = ""; }
        if (message != "" && message != undefined && message != null) {
            document.write(this.Send(message));
        }
        else {
            CaptureException("NOTFOUND", "new SendException(" + message + ")", 'message');
        }
    }
    SendException.prototype.Send = function (send) {
        return "<h1 style='background-color:yellow;border-radius:5px;text-align:center;'>" + send + "</h1>";
    };
    return SendException;
}());
function CaptureException(type, key, param) {
    if (type === void 0) { type = "NOTFOUND"; }
    if (key === void 0) { key = "CaptureException()"; }
    if (param === void 0) { param = "type or key or param"; }
    if (type == "NOTFOUND") {
        value_exp += 1;
        if (value_exp == 1) {
            new SendException("And there Friend you forgot to pass a parameter\n" + ("Error In the code stretch: <em>\"" + key + "\"</em>\nin the parameters: <em>" + param + "</em>\n " + value_exp + " Error"));
        }
        else if (value_exp > 1) {
            new SendException("And there Friend you forgot to pass a parameter\n" + ("Error In the code stretch: <em>\"" + key + "\"</em>\nin the parameters: <em>" + param + "</em>\n " + value_exp + " Errors"));
        }
    }
    else if (type == "FRONTNOT") {
        value_exp += 1;
        if (value_exp == 1) {
            new SendException("Hey buddy to close the front tag initialization with end, the front tag must be open.\n" + (" Error In the code stretch: <em>\"" + key + "\"</em> \n " + value_exp + " Error"));
        }
        else if (value_exp > 1) {
            new SendException("Hey buddy to close the front tag initialization with end, the front tag must be open.\n" + (" Error In the code stretch: <em>\"" + key + "\"</em> \n " + value_exp + " Errors"));
        }
    }
    else if (type == "OPENNOT") {
        value_exp += 1;
        if (value_exp == 1) {
            new SendException("Hey buddy to close tag initialization with end, the tag must be open.\n" + (" Error In the code stretch: <em>\"" + key + "\"</em> \n " + value_exp + " Error"));
        }
        else if (value_exp > 1) {
            new SendException("Hey buddy to close tag initialization with end, the tag must be open.\n" + (" Error In the code stretch: <em>\"" + key + "\"</em> \n " + value_exp + " Errors"));
        }
    }
    else if (type == "MAINERROR") {
        value_exp += 1;
        if (value_exp == 1) {
            new SendException("Ei Amigo Amigo Você tem que passa um calback de acordo com a tipo de calback pedido." + (" Error In the code stretch: <em>\"" + key + "\"</em> \n " + value_exp + " Error"));
        }
        else if (value_exp > 1) {
            new SendException("Ei Amigo Amigo Você tem que passa um calback de acordo com a tipo de calback pedido." + (" Error In the code stretch: <em>\"" + key + "\"</em> \n " + value_exp + " Errors"));
        }
    }
}
function Write(value) {
    if (value === void 0) { value = ""; }
    if (value != "" && value != undefined && value != null) {
        //Write in Document
        document.write(value);
        return value;
    }
    else {
        return CaptureException("NOTFOUND", "Write()", "value");
    }
}
function WriteLn(value) {
    if (value === void 0) { value = ""; }
    if (value != "" && value != undefined && value != null) {
        //Write in Document
        document.writeln(value);
        return value;
    }
    else {
        return CaptureException("NOTFOUND", "Write()", "value");
    }
}

var usings = new /** @class */ (function () {
    function Usings() {
        this.use_html = 0;
        this.use_head = 0;
        this.use_body = 0;
        this.use_div = 0;
        this.use_nav = 0;
        this.use_header = 0;
        this.use_section = 0;
        this.use_footer = 0;
        this.use_article = 0;
        this.use_form = 0;
        // Users for OutComponents
        this.use_Template = 0;
        this.use_View = 0;
    }
    return Usings;
}());
function Commands(commands) {
    var text = String("");
    var selecters = Object.keys(commands);
    for (var n in selecters) {
        text += selecters[n] + "=" + '"' + commands[selecters[n]] + '"' + " ";
    }
    return text;
}
var Html;
(function (Html) {
    var Components = /** @class */ (function () {
        function Components() {
            this.components = this;
            this.html = {
                then: function (commands) {
                    if (commands === void 0) { commands = {}; }
                    document.writeln("<html " + Commands(commands) + " >");
                    usings.use_html += 1;
                },
                end: function () {
                    if (usings.use_html > 0) {
                        document.writeln("</html>");
                        usings.use_html -= 1;
                    }
                    else {
                        CaptureException("OPENNOT", "html.end()");
                    }
                }
            };
            this.head = {
                then: function (commands) {
                    if (commands === void 0) { commands = {}; }
                    document.writeln("<head " + Commands(commands) + " >");
                    usings.use_head += 1;
                },
                end: function () {
                    if (usings.use_html > 0) {
                        document.writeln("</head>");
                        usings.use_head -= 1;
                    }
                    else {
                        CaptureException("OPENNOT", "head.end()");
                    }
                }
            };
            this.body = {
                then: function (commands) {
                    if (commands === void 0) { commands = {}; }
                    document.writeln("<body " + Commands(commands) + ">");
                    usings.use_body += 1;
                },
                end: function () {
                    if (usings.use_body > 0) {
                        document.writeln("</body>");
                        usings.use_body -= 1;
                    }
                    else {
                        CaptureException("OPENNOT", "body.end()");
                    }
                }
            };
            this.div = {
                then: function (commands) {
                    if (commands === void 0) { commands = {}; }
                    document.writeln("<div " + Commands(commands) + " >");
                    usings.use_div += 1;
                },
                end: function () {
                    if (usings.use_div > 0) {
                        document.writeln("</div>");
                        usings.use_div -= 1;
                    }
                    else {
                        CaptureException("OPENNOT", "div.end()");
                    }
                }
            };
            this.nav = {
                then: function (commands) {
                    if (commands === void 0) { commands = {}; }
                    document.writeln("<nav " + Commands(commands) + " >");
                    usings.use_nav += 1;
                },
                end: function () {
                    if (usings.use_nav > 0) {
                        document.writeln("</nav>");
                        usings.use_nav -= 1;
                    }
                    else {
                        CaptureException("OPENNOT", "nav.end()");
                    }
                }
            };
            this.header = {
                then: function (commands) {
                    if (commands === void 0) { commands = {}; }
                    document.writeln("<header " + Commands(commands) + " >");
                    usings.use_header += 1;
                },
                end: function () {
                    if (usings.use_header > 0) {
                        document.writeln("</header>");
                        usings.use_header -= 1;
                    }
                    else {
                        CaptureException("OPENNOT", "header.end()");
                    }
                }
            };
            this.section = {
                then: function (commands) {
                    if (commands === void 0) { commands = {}; }
                    document.writeln("<section " + Commands(commands) + " >");
                    usings.use_section += 1;
                },
                end: function () {
                    if (usings.use_section > 0) {
                        document.writeln("</section>");
                        usings.use_section -= 1;
                    }
                    else {
                        CaptureException("OPENNOT", "section.end()");
                    }
                }
            };
            this.footer = {
                then: function (commands) {
                    if (commands === void 0) { commands = {}; }
                    document.writeln("<footer " + Commands(commands) + " >");
                    usings.use_footer += 1;
                },
                end: function () {
                    if (usings.use_footer > 0) {
                        document.writeln("</footer>");
                        usings.use_footer -= 1;
                    }
                    else {
                        CaptureException("OPENNOT", "footer.end()");
                    }
                }
            };
            this.article = {
                then: function (commands) {
                    if (commands === void 0) { commands = {}; }
                    document.writeln("<article " + Commands(commands) + " >");
                    usings.use_article += 1;
                },
                end: function () {
                    if (usings.use_article > 0) {
                        document.writeln("</article>");
                        usings.use_article -= 1;
                    }
                    else {
                        CaptureException("OPENNOT", "article.end()");
                    }
                }
            };
            this.form = {
                then: function (commands) {
                    if (commands === void 0) { commands = {}; }
                    document.writeln("<form " + Commands(commands) + " >");
                    usings.use_form += 1;
                },
                end: function () {
                    if (usings.use_form > 0) {
                        document.writeln("</form>");
                        usings.use_form -= 1;
                    }
                    else {
                        CaptureException("OPENNOT", "form.end()");
                    }
                }
            };
        }
        // To functions
        Components.prototype.title = function (values) {
            if (values === void 0) { values = document.URL; }
            document.writeln("<title>" + values + "</title>");
        };
        Components.prototype.meta = function (commands) {
            if (commands === void 0) { commands = { charset: "UTF-8" }; }
            document.writeln("<meta " + Commands(commands) + ">");
        };
        Components.prototype.h1 = function (values, commands) {
            if (values === void 0) { values = ""; }
            if (commands === void 0) { commands = {}; }
            if (values != "" && values != null && values != undefined) {
                document.writeln("<h1 " + Commands(commands) + ">" + values + "</h1>");
                return values;
            }
            else {
                CaptureException("NOTFOUND", "h1()", "values");
            }
        };
        Components.prototype.h2 = function (values, commands) {
            if (values === void 0) { values = ""; }
            if (commands === void 0) { commands = {}; }
            if (values != "" && values != null && values != undefined) {
                document.writeln("<h2 " + Commands(commands) + ">" + values + "</h2>");
                return values;
            }
            else {
                CaptureException("NOTFOUND", "h2()", "values");
            }
        };
        Components.prototype.h3 = function (values, commands) {
            if (values === void 0) { values = ""; }
            if (commands === void 0) { commands = {}; }
            if (values != "" && values != null && values != undefined) {
                document.writeln("<h3 " + Commands(commands) + ">" + values + "</h3>");
                return values;
            }
            else {
                CaptureException("NOTFOUND", "h3()", "values");
            }
        };
        Components.prototype.h4 = function (values, commands) {
            if (values === void 0) { values = ""; }
            if (commands === void 0) { commands = {}; }
            if (values != "" && values != null && values != undefined) {
                document.writeln("<h4 " + Commands(commands) + ">" + values + "</h4>");
                return values;
            }
            else {
                CaptureException("NOTFOUND", "h1()", "values");
            }
        };
        Components.prototype.h5 = function (values, commands) {
            if (values === void 0) { values = ""; }
            if (commands === void 0) { commands = {}; }
            if (values != "" && values != null && values != undefined) {
                document.writeln("<h5 " + Commands(commands) + ">" + values + "</h5>");
                return values;
            }
            else {
                CaptureException("NOTFOUND", "h5()", "values");
            }
        };
        Components.prototype.h6 = function (values, commands) {
            if (values === void 0) { values = ""; }
            if (commands === void 0) { commands = {}; }
            if (values != "" && values != null && values != undefined) {
                document.writeln("<h6 " + Commands(commands) + ">" + values + "</h6>");
                return values;
            }
            else {
                CaptureException("NOTFOUND", "h6()", "values");
            }
        };
        Components.prototype.p = function (values, commands) {
            if (values === void 0) { values = ""; }
            if (commands === void 0) { commands = {}; }
            if (values != "" && values != null && values != undefined) {
                document.writeln("<p " + Commands(commands) + ">" + values + "</a>");
                return values;
            }
            else {
                CaptureException("NOTFOUND", "p()", "values");
            }
        };
        Components.prototype.strong = function (values, commands) {
            if (values === void 0) { values = ""; }
            if (commands === void 0) { commands = {}; }
            if (values != "" && values != null && values != undefined) {
                document.writeln("<strong " + Commands(commands) + ">" + values + "</strong>");
                return values;
            }
            else {
                CaptureException("NOTFOUND", "strong()", "values");
            }
        };
        Components.prototype.em = function (values, commands) {
            if (values === void 0) { values = ""; }
            if (commands === void 0) { commands = {}; }
            if (values != "" && values != null && values != undefined) {
                document.writeln("<em " + Commands(commands) + ">" + values + "</em>");
                return values;
            }
            else {
                CaptureException("NOTFOUND", "em()", "values");
            }
        };
        Components.prototype.br = function () {
            document.writeln("<br>");
        };
        Components.prototype.hr = function () {
            document.writeln("<hr>");
        };
        Components.prototype.a = function (values, href, commands) {
            if (values === void 0) { values = ""; }
            if (href === void 0) { href = "#"; }
            if (commands === void 0) { commands = {}; }
            if (values != "" && values != null && values != undefined) {
                document.writeln("<a href=" + href + " " + Commands(commands) + ">" + values + "</a>");
                return values;
            }
            else {
                CaptureException("NOTFOUND", "a()", "values");
            }
        };
        Components.prototype.button = function (values, commands) {
            if (values === void 0) { values = ""; }
            if (commands === void 0) { commands = {}; }
            if (values != "" && values != null && values != undefined) {
                document.writeln("<button " + Commands(commands) + ">" + values + "</button>");
                return values;
            }
            else {
                CaptureException("NOTFOUND", "button()", "values");
            }
        };
        Components.prototype.input = function (type, commands) {
            if (type === void 0) { type = ""; }
            if (commands === void 0) { commands = {}; }
            if (type != "" && type != null && type != undefined) {
                document.writeln("<input type='" + type + "' " + Commands(commands) + " >");
                // No return
            }
            else {
                CaptureException("NOTFOUND", "input()", "type");
            }
        };
        return Components;
    }());
    Html.Components = Components;
})(Html || (Html = {}));
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Star;
(function (Star) {
    var Components = /** @class */ (function (_super) {
        __extends(Components, _super);
        function Components() {
            var _this = _super.call(this) || this;
            _this.Template = {
                then: function (commands) {
                    if (commands === void 0) { commands = ""; }
                    document.writeln("<startemplate " + commands + " >");
                    usings.use_Template += 1;
                },
                end: function () {
                    if (usings.use_Template > 0) {
                        document.writeln("</startemplate>");
                        usings.use_Template -= 1;
                    }
                    else {
                        CaptureException("OPENNOT", "Template.end()");
                    }
                }
            };
            _this.View = {
                then: function (commands) {
                    if (commands === void 0) { commands = ""; }
                    document.writeln("<view " + commands + " >");
                    usings.use_View += 1;
                },
                end: function () {
                    if (usings.use_View > 0) {
                        document.writeln("</view>");
                        usings.use_View -= 1;
                    }
                    else {
                        CaptureException("OPENNOT", "View.end()");
                    }
                }
            };
            return _this;
        }
        // public Text(values,commands=''){
        // } fazer o component texxt
        Components.prototype.StatusBar = function (color) {
            if (color === void 0) { color = '#333'; }
            document.writeln("<meta name=\"theme-color\" content=\"" + color + "\" >");
        };
        Components.prototype.Background = function (color) {
            if (color === void 0) { color = '#333'; }
            document.writeln("<meta name=\"background-color\" content=\"" + color + "\" >");
        };
        return Components;
    }(Html.Components));
    Star.Components = Components;
})(Star || (Star = {}));
var Components = new Star.Components();
var Script;
(function (Script) {
    Script.load = function (arq) {
        if (arq != "" || arq != undefined || arq != null) {
            fetch(arq)
                .then(function (data) { return data.text(); })["catch"](function (err) { console.log("This is a Erro ->", err); })
                .then(function (datacode) { eval(String(datacode)); })["catch"](function (err) { console.log("This is a Erro ->", err); });
        }
        else {
            CaptureException("NOTFOUND", "Script.load()", "arq");
        }
    };
    Script.run = function (code) {
        if (code != "" || code != undefined || code != null) {
            eval(code);
        }
        else {
            CaptureException("NOTFOUND", "Script.run()", "code");
        }
    };
})(Script || (Script = {}));
var Style;
(function (Style) {
    function load(arq) {
        if (arq != "" || arq != undefined || arq != null) {
            fetch(arq)
                .then(function (data) { return data.text(); })["catch"](function (err) { console.log("This is a Erro ->", err); })
                .then(function (datacode) {
                document.writeln("\n<style>\n" + datacode + "\n</style>\n");
            })["catch"](function (err) { console.log("This is a Erro ->", err); });
        }
        else {
            CaptureException("NOTFOUND", "Style.load()", "arq");
        }
    }
    Style.load = load;
    Style.run = function (code) {
        if (code != "" || code != undefined || code != null) {
            document.writeln("\n<style>\n" + code + "\n</style>\n");
        }
        else {
            CaptureException("NOTFOUND", "Style.run()", "code");
        }
    };
})(Style || (Style = {}));
var Get = function (variable) {
    if (variable === void 0) {
        variable = "";
    }
    if (variable == "" || variable == null || variable == undefined) {
        CaptureException("NOTFOUND", "Get", "variable");
    }
    else {
        var p = document.URL.split("?").join("=");
        var p = p.split("&").join("=");
        var p = p.split("%20").join(" ");
        var p = p.split("%3C").join("<");
        var p = p.split("%3E").join(">");
        var p = p.split("%22").join('"');
        var p = p.split("%27").join("'");
        var url = p.split("=");
        for (var i in url) {
            if (variable == url[i]) {
                return url[Number(i) + 1];
            }
        }
    }
};
var isRoute = function (route) {
    if (route === void 0) { route = ""; }
    if (route == "" || route == null || route == undefined) {
        CaptureException("NOTFOUND", "isRoute", "route");
    }
    else {
        if (document.URL.search(route) > 0) {
            return true;
        }
        else {
            return false;
        }
    }
};
var isLocation = function (route) {
    if (route === void 0) { route = ""; }
    if (route == "" || route == null || route == undefined) {
        CaptureException("NOTFOUND", "isLocation", "route");
    }
    else {
        if (document.URL.search(route) > 0) {
            return true;
        }
        else {
            return false;
        }
    }
};
var Route = /** @class */ (function () {
    function Route() {
        this.routeName = "";
    }
    Route.prototype.define = function (route, calback) {
        if (route === void 0) { route = ""; }
        if (route == "" || route == null || route == undefined ||
            calback == "" || calback == null || calback == undefined) {
            CaptureException("NOTFOUND", "Route.define()", "route or calback");
        }
        else {
            if (isRoute(route)) {
                this.routeName = route;
                this.calbackFunc = calback;
                calback();
            }
        }
    };
    Route.prototype.isAcessed = function () {
        var route = this.routeName;
        if (route == "" || route == null || route == undefined) {
            CaptureException("NOTFOUND", "", "route");
        }
        else {
            if (document.URL.search(route) > 0) {
                return true;
            }
            else {
                return false;
            }
        }
    };
    return Route;
}());
var moveRoute = function (route) {
    if (route === void 0) { route = ""; }
    if (route == "" || route == null || route == undefined) {
        CaptureException("NOTFOUND", "moveRoute", "route");
    }
    else {
        location.assign(route);
    }
};
var moveLocation = function (route) {
    if (route === void 0) { route = ""; }
    if (route == "" || route == null || route == undefined) {
        CaptureException("NOTFOUND", "moveLocation", "route");
    }
    else {
        location.assign(route);
    }
};
var StyleSheets = /** @class */ (function () {
    function StyleSheets(calback) {
        if (calback != null && calback != "" && calback != undefined) {
            document.writeln("<style>");
            document.writeln(StyleSheets.transform(calback()));
            document.writeln("</style>");
        }
        else {
            CaptureException("NOTFOUND", "StyleSheets()", "calback");
        }
    }
    StyleSheets.render = function (css) {
        if (css != null && css != "" && css != undefined) {
            document.writeln("<style>");
            document.writeln(StyleSheets.transform(css));
            document.writeln("</style>");
            return css;
        }
        else {
            CaptureException("NOTFOUND", "StyleSheets.render()", "css");
        }
    };
    StyleSheets.transform = function (code_json) {
        var selecters = Object.keys(code_json);
        return selecters.map(function (selector) {
            var definition = code_json[selector];
            var reals = Object.keys(definition);
            var code_css = reals.map(function (rule) {
                return rule + ":" + definition[rule];
            }).join(';');
            selector = selector.replace("____", "*");
            selector = selector.replace("___", "#");
            selector = selector.replace("__", ".");
            selector = selector.replace("_", "-");
            code_css = code_css.split('_').join('-');
            code_css = code_css.split(',').join(' ');
            return selector + "{" + code_css + ";}";
        }).join('\n');
    }; // Qualquer erro é so tira a ; do lado code_css};
    return StyleSheets;
}());
var Application = {
    width: screen.width,
    height: screen.height,
    url: document.URL,
    title: document.title,
    MainPageFunction: function (calback) {
        try {
            window.onload = function () { return calback(); };
        }
        catch (error) {
            CaptureException("MAINERROR", "Application.MainFunction()");
            // Talvez Muda o Nome da exceção
        }
    },
    MainPageClass: function (calback) {
        try {
            window.onload = function () { return new calback(); };
        }
        catch (error) {
            CaptureException("MAINERROR", "Application.MainClass()");
        }
    }
};


const App = Application;

// Star js Versão 0.2
// Star Js Version 0.2 